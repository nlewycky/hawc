# Generated by Django 2.2 on 2019-04-20 04:00

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('epi', '0001_initial'),
        ('study', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MetaProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Protocol name')),
                ('protocol_type', models.PositiveSmallIntegerField(choices=[(0, 'Meta-analysis'), (1, 'Pooled-analysis')], default=0)),
                ('lit_search_strategy', models.PositiveSmallIntegerField(choices=[(0, 'Systematic'), (1, 'Other')], default=0, verbose_name='Literature search strategy')),
                ('lit_search_notes', models.TextField(blank=True, verbose_name='Literature search notes')),
                ('lit_search_start_date', models.DateField(blank=True, null=True, verbose_name='Literature search start-date')),
                ('lit_search_end_date', models.DateField(blank=True, null=True, verbose_name='Literature search end-date')),
                ('total_references', models.PositiveIntegerField(blank=True, help_text='References identified through initial literature-search before application of inclusion/exclusion criteria', null=True, verbose_name='Total number of references found')),
                ('total_studies_identified', models.PositiveIntegerField(help_text='Total references identified for inclusion after application of literature review and screening criteria', verbose_name='Total number of studies identified')),
                ('notes', models.TextField(blank=True)),
                ('exclusion_criteria', models.ManyToManyField(blank=True, related_name='meta_exclusion_criteria', to='epi.Criteria')),
                ('inclusion_criteria', models.ManyToManyField(blank=True, related_name='meta_inclusion_criteria', to='epi.Criteria')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta_protocols', to='study.Study')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MetaResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=128)),
                ('data_location', models.CharField(blank=True, help_text='Details on where the data are found in the literature (ex: Figure 1, Table 2, etc.)', max_length=128)),
                ('health_outcome', models.CharField(max_length=128)),
                ('health_outcome_notes', models.TextField(blank=True)),
                ('exposure_name', models.CharField(max_length=128)),
                ('exposure_details', models.TextField(blank=True)),
                ('number_studies', models.PositiveSmallIntegerField()),
                ('statistical_notes', models.TextField(blank=True)),
                ('n', models.PositiveIntegerField(help_text='Number of individuals included from all analyses')),
                ('estimate', models.FloatField()),
                ('heterogeneity', models.CharField(blank=True, max_length=256)),
                ('lower_ci', models.FloatField(help_text='Numerical value for lower-confidence interval', verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(help_text='Numerical value for upper-confidence interval', verbose_name='Upper CI')),
                ('ci_units', models.FloatField(blank=True, default=0.95, help_text='A 95% CI is written as 0.95.', null=True, verbose_name='Confidence Interval (CI)')),
                ('notes', models.TextField(blank=True)),
                ('adjustment_factors', models.ManyToManyField(blank=True, help_text='All factors which were included in final model', related_name='meta_adjustments', to='epi.AdjustmentFactor')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='epi.ResultMetric')),
                ('protocol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epimeta.MetaProtocol')),
            ],
            options={
                'ordering': ('label',),
            },
        ),
        migrations.CreateModel(
            name='SingleResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exposure_name', models.CharField(help_text='Enter a descriptive-name for the single study result (e.g., "Smith et al. 2000, obese-males")', max_length=128)),
                ('weight', models.FloatField(blank=True, help_text='For meta-analysis, enter the fraction-weight assigned for each result (leave-blank for pooled analyses)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('n', models.PositiveIntegerField(blank=True, help_text='Enter the number of observations for this result', null=True)),
                ('estimate', models.FloatField(blank=True, help_text='Enter the numerical risk-estimate presented for this result', null=True)),
                ('lower_ci', models.FloatField(blank=True, help_text='Numerical value for lower-confidence interval', null=True, verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(blank=True, help_text='Numerical value for upper-confidence interval', null=True, verbose_name='Upper CI')),
                ('ci_units', models.FloatField(blank=True, default=0.95, help_text='A 95% CI is written as 0.95.', null=True, verbose_name='Confidence Interval (CI)')),
                ('notes', models.TextField(blank=True)),
                ('meta_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='single_results', to='epimeta.MetaResult')),
                ('study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='single_results', to='study.Study')),
            ],
            options={
                'ordering': ('exposure_name',),
            },
        ),
    ]
