# Generated by Django 2.1.2 on 2018-11-02 02:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Describe the objective of the health-assessment.', max_length=80, verbose_name='Assessment Name')),
                ('year', models.PositiveSmallIntegerField(help_text='Year with which the assessment should be associated.', verbose_name='Assessment Year')),
                ('version', models.CharField(help_text='Version to describe the current assessment (i.e. draft, final, v1).', max_length=80, verbose_name='Assessment Version')),
                ('cas', models.CharField(blank=True, help_text='Add a single CAS-number if one is available to describe the assessment, otherwise leave-blank.', max_length=40, verbose_name='Chemical identifier (CAS)')),
                ('assessment_objective', models.TextField(blank=True, help_text='Describe the assessment objective(s), research questions, or clarification on the purpose of the assessment.')),
                ('editable', models.BooleanField(default=True, help_text='Project-managers and team-members are allowed to edit assessment components.')),
                ('public', models.BooleanField(default=False, help_text='The assessment can be viewed by the general public.')),
                ('hide_from_public_page', models.BooleanField(default=False, help_text='If public, anyone with a link can view, but do not show a link on the public-assessment page.')),
                ('enable_literature_review', models.BooleanField(default=True, help_text='Search or import references from PubMed and other literature databases, define inclusion, exclusion, or descriptive tags, and apply these tags to retrieved literature for your analysis.')),
                ('enable_project_management', models.BooleanField(default=True, help_text='Enable project management module for data extraction and risk of bias. If enabled, each study will have multiple tasks which can be assigned and tracked for completion.')),
                ('enable_data_extraction', models.BooleanField(default=True, help_text='Extract animal bioassay, epidemiological, or in-vitro data from key references and create customizable, dynamic visualizations or summary data and associated metadata for display.')),
                ('enable_risk_of_bias', models.BooleanField(default=True, help_text='Define criteria for a systematic review of literature, and apply these criteria to references in your literature-review. View details on findings and identify areas with a potential risk of bias.')),
                ('enable_bmd', models.BooleanField(default=True, help_text="Conduct benchmark dose (BMD) modeling on animal bioassay data available in the HAWC database, using the US EPA's Benchmark Dose Modeling Software (BMDS).", verbose_name='Enable BMD modeling')),
                ('enable_summary_text', models.BooleanField(default=True, help_text='Create custom-text to describe methodology and results of the assessment; insert tables, figures, and visualizations to using "smart-tags" which link to other data in HAWC.')),
                ('conflicts_of_interest', models.TextField(blank=True, help_text='Describe any conflicts of interest by the assessment-team.')),
                ('funding_source', models.TextField(blank=True, help_text='Describe the funding-source(s) for this assessment.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=128)),
                ('attachment', models.FileField(upload_to='attachment')),
                ('publicly_available', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='BaseEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Endpoint name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Assessment')),
            ],
        ),
        migrations.CreateModel(
            name='DoseUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'dose units',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EffectTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('slug', models.SlugField(help_text='The URL (web address) used to describe this object (no spaces or special-characters).', max_length=128, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter species in singular (ex: Mouse, not Mice)', max_length=30, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'species',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='assessment.Species')),
            ],
            options={
                'ordering': ('species', 'name'),
            },
        ),
        migrations.CreateModel(
            name='TimeSpentEditing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seconds', models.FloatField(validators=[django.core.validators.MinValueValidator])),
                ('object_id', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Assessment')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'Time spent editing models',
            },
        ),
        migrations.AddField(
            model_name='baseendpoint',
            name='effects',
            field=models.ManyToManyField(blank=True, to='assessment.EffectTag', verbose_name='Tags'),
        ),
    ]
