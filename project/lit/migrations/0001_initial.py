# Generated by Django 2.2 on 2019-04-20 04:00

from django.db import migrations, models
import django.db.models.deletion
import lit.managers
import utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessment', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Identifiers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(db_index=True, max_length=256)),
                ('database', models.IntegerField(choices=[(0, 'External link'), (1, 'PubMed'), (2, 'HERO'), (3, 'RIS (EndNote/Reference Manager)'), (4, 'DOI'), (5, 'Web of Science'), (6, 'Scopus'), (7, 'Embase')])),
                ('content', models.TextField()),
                ('url', models.URLField(blank=True)),
            ],
            options={
                'unique_together': {('database', 'unique_id')},
                'index_together': {('database', 'unique_id')},
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True)),
                ('authors', models.TextField(blank=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('journal', models.TextField(blank=True)),
                ('abstract', models.TextField(blank=True)),
                ('full_text_url', utils.models.CustomURLField(blank=True, help_text='Link to full-text URL from journal site (may require increased access privileges to view)')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('block_id', models.DateTimeField(blank=True, help_text='Used internally for determining when reference was originally added', null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='references', to='assessment.Assessment')),
                ('identifiers', models.ManyToManyField(blank=True, related_name='references', to='lit.Identifiers')),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceFilterTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, verbose_name='Slug')),
            ],
            options={
                'abstract': False,
            },
            bases=(utils.models.AssessmentRootMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_type', models.CharField(choices=[('s', 'Search'), ('i', 'Import')], max_length=1)),
                ('source', models.PositiveSmallIntegerField(choices=[(0, 'External link'), (1, 'PubMed'), (2, 'HERO'), (3, 'RIS (EndNote/Reference Manager)'), (4, 'DOI'), (5, 'Web of Science'), (6, 'Scopus'), (7, 'Embase')], help_text='Database used to identify literature.')),
                ('title', models.CharField(help_text='A brief-description to describe the identified literature.', max_length=128)),
                ('slug', models.SlugField(help_text='The URL (web address) used to describe this object (no spaces or special-characters).', verbose_name='URL Name')),
                ('description', models.TextField(blank=True, help_text='A more detailed description of the literature search or import strategy.')),
                ('search_string', models.TextField(blank=True, help_text='The search-text used to query an online database. Use colors to separate search-terms (optional).')),
                ('import_file', models.FileField(blank=True, upload_to='lit-search-import')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='literature_searches', to='assessment.Assessment')),
            ],
            options={
                'verbose_name_plural': 'searches',
                'ordering': ['-last_updated'],
                'get_latest_by': 'last_updated',
                'unique_together': {('assessment', 'slug'), ('assessment', 'title')},
            },
        ),
        migrations.CreateModel(
            name='ReferenceTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit.Reference')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lit_referencetags_items', to='lit.ReferenceFilterTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='reference',
            name='searches',
            field=models.ManyToManyField(related_name='references', to='lit.Search'),
        ),
        migrations.AddField(
            model_name='reference',
            name='tags',
            field=lit.managers.ReferenceFilterTagManager(blank=True, help_text='A comma-separated list of tags.', through='lit.ReferenceTags', to='lit.ReferenceFilterTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='PubMedQuery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('results', models.TextField(blank=True)),
                ('query_date', models.DateTimeField(auto_now_add=True)),
                ('search', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lit.Search')),
            ],
            options={
                'verbose_name_plural': 'PubMed Queries',
                'ordering': ['-query_date'],
                'get_latest_by': 'query_date',
            },
        ),
    ]
