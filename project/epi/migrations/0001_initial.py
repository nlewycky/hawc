# Generated by Django 2.1.2 on 2018-11-02 02:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessment', '0001_initial'),
        ('study', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdjustmentFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Assessment')),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='ComparisonSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=2)),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Assessment')),
            ],
            options={
                'verbose_name_plural': 'Criteria',
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='Ethnicity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Ethnicities',
            },
        ),
        migrations.CreateModel(
            name='Exposure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of exposure and exposure-route', max_length=128)),
                ('inhalation', models.BooleanField(default=False)),
                ('dermal', models.BooleanField(default=False)),
                ('oral', models.BooleanField(default=False)),
                ('in_utero', models.BooleanField(default=False)),
                ('iv', models.BooleanField(default=False, verbose_name='Intravenous (IV)')),
                ('unknown_route', models.BooleanField(default=False)),
                ('measured', models.CharField(blank=True, max_length=128, verbose_name='What was measured')),
                ('metric', models.CharField(max_length=128, verbose_name='Measurement Metric')),
                ('metric_description', models.TextField(verbose_name='Measurement Description')),
                ('analytical_method', models.TextField(help_text='Include details on the lab-techniques for exposure measurement in samples.')),
                ('sampling_period', models.CharField(blank=True, help_text='Exposure sampling period', max_length=128)),
                ('age_of_exposure', models.CharField(blank=True, help_text='Textual age description for when exposure measurement sample was taken, treatment given, or age for which survey data apply [examples include:  specific age indicated in the study (e.g., "gestational week 20, 3 years of age, 10-12 years of age, previous 12 months") OR standard age categories: "fetal (in utero), neonatal (0-27 days), infancy (1-12 months) toddler (1-2 years), middle childhood (6-11 years, early adolescence (12-18 years),late adolescence (19-21 years), adulthood (>21),older adulthood (varies)" – based on NICHD Integratedpediatric terminology]', max_length=32)),
                ('duration', models.CharField(blank=True, help_text='Exposure duration', max_length=128)),
                ('exposure_distribution', models.CharField(blank=True, help_text='May be used to describe the exposure distribution, for example, "2.05 µg/g creatinine (urine), geometric mean; 25th percentile = 1.18, 75th percentile = 3.33"', max_length=128)),
                ('n', models.PositiveIntegerField(blank=True, help_text='Individuals where outcome was measured', null=True)),
                ('estimate', models.FloatField(blank=True, help_text='Central tendency estimate', null=True)),
                ('estimate_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'mean'), (2, 'geometric mean'), (3, 'median'), (5, 'point'), (4, 'other')], default=0, verbose_name='Central estimate type')),
                ('variance', models.FloatField(blank=True, help_text='Variance estimate', null=True, verbose_name='Variance')),
                ('variance_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'SD'), (2, 'SE'), (3, 'SEM'), (4, 'GSD'), (5, 'other')], default=0)),
                ('lower_ci', models.FloatField(blank=True, help_text='Numerical value for lower-confidence interval', null=True, verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(blank=True, help_text='Numerical value for upper-confidence interval', null=True, verbose_name='Upper CI')),
                ('lower_range', models.FloatField(blank=True, help_text='Numerical value for lower range', null=True, verbose_name='Lower range')),
                ('upper_range', models.FloatField(blank=True, help_text='Numerical value for upper range', null=True, verbose_name='Upper range')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('metric_units', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.DoseUnits')),
            ],
            options={
                'verbose_name': 'Exposure',
                'verbose_name_plural': 'Exposures',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=256)),
                ('numeric', models.FloatField(blank=True, help_text='Numerical value, can be used for sorting', null=True, verbose_name='Numerical value (sorting)')),
                ('comparative_name', models.CharField(blank=True, help_text='Group and value, displayed in plots, for example "1.5-2.5(Q2) vs ≤1.5(Q1)", or if only one group is available, "4.8±0.2 (mean±SEM)"', max_length=64, verbose_name='Comparative Name')),
                ('sex', models.CharField(choices=[('U', 'Not reported'), ('M', 'Male'), ('F', 'Female'), ('B', 'Male and Female')], default='U', max_length=1)),
                ('eligible_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Eligible N')),
                ('invited_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Invited N')),
                ('participant_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Participant N')),
                ('isControl', models.NullBooleanField(choices=[(True, 'Yes'), (False, 'No'), (None, 'N/A')], default=None, help_text='Should this group be interpreted as a null/control group', verbose_name='Control?')),
                ('comments', models.TextField(blank=True, help_text='Any other comments related to this group')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('comparison_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='epi.ComparisonSet')),
                ('ethnicities', models.ManyToManyField(blank=True, to='epi.Ethnicity')),
            ],
            options={
                'ordering': ('comparison_set', 'group_id'),
            },
        ),
        migrations.CreateModel(
            name='GroupNumericalDescriptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Description if numeric ages do not make sense for this study-population (ex: longitudinal studies)', max_length=128)),
                ('mean', models.FloatField(blank=True, null=True, verbose_name='Central estimate')),
                ('mean_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'mean'), (2, 'geometric mean'), (3, 'median'), (4, 'other')], default=0, verbose_name='Central estimate type')),
                ('is_calculated', models.BooleanField(default=False, help_text='Was value calculated/estimated from literature?')),
                ('variance', models.FloatField(blank=True, null=True)),
                ('variance_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'SD'), (2, 'SEM'), (3, 'GSD'), (4, 'other')], default=0)),
                ('lower', models.FloatField(blank=True, null=True)),
                ('lower_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'lower limit'), (2, '5% CI'), (3, 'other')], default=0)),
                ('upper', models.FloatField(blank=True, null=True)),
                ('upper_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'upper limit'), (2, '95% CI'), (3, 'other')], default=0)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='descriptions', to='epi.Group')),
            ],
        ),
        migrations.CreateModel(
            name='GroupResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n', models.PositiveIntegerField(blank=True, help_text='Individuals in group where outcome was measured', null=True)),
                ('estimate', models.FloatField(blank=True, help_text='Central tendency estimate for group', null=True)),
                ('variance', models.FloatField(blank=True, help_text='Variance estimate for group', null=True, verbose_name='Variance')),
                ('lower_ci', models.FloatField(blank=True, help_text='Numerical value for lower-confidence interval', null=True, verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(blank=True, help_text='Numerical value for upper-confidence interval', null=True, verbose_name='Upper CI')),
                ('lower_range', models.FloatField(blank=True, help_text='Numerical value for lower range', null=True, verbose_name='Lower range')),
                ('upper_range', models.FloatField(blank=True, help_text='Numerical value for upper range', null=True, verbose_name='Upper range')),
                ('p_value_qualifier', models.CharField(choices=[(' ', '-'), ('-', 'n.s.'), ('<', '<'), ('=', '='), ('>', '>')], default='-', max_length=1, verbose_name='p-value qualifier')),
                ('p_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='p-value')),
                ('is_main_finding', models.BooleanField(blank=True, help_text='Is this the main-finding for this outcome?', verbose_name='Main finding')),
                ('main_finding_support', models.PositiveSmallIntegerField(choices=[(3, 'not-reported'), (2, 'supportive'), (1, 'inconclusive'), (0, 'not-supportive')], default=1, help_text='Are the results supportive of the main-finding?')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epi.Group')),
            ],
            options={
                'ordering': ('result', 'group__group_id'),
            },
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('baseendpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='assessment.BaseEndpoint')),
                ('system', models.CharField(blank=True, help_text='Relevant biological system', max_length=128)),
                ('effect', models.CharField(blank=True, help_text='Effect, using common-vocabulary', max_length=128)),
                ('effect_subtype', models.CharField(blank=True, help_text='Effect subtype, using common-vocabulary', max_length=128)),
                ('diagnostic', models.PositiveSmallIntegerField(choices=[(0, 'not reported'), (1, 'medical professional or test'), (2, 'medical records'), (3, 'self-reported'), (4, 'questionnaire'), (5, 'hospital admission'), (6, 'other')])),
                ('diagnostic_description', models.TextField()),
                ('outcome_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Outcome N')),
                ('age_of_measurement', models.CharField(blank=True, help_text='Textual age description when outcomes were measured [examples include:  specific age indicated in the study (e.g., "3 years of age, 10-12 years of age") OR standard age categories: "infancy (1-12 months), toddler (1-2 years), middle childhood (6-11 years, early adolescence (12-18 years), late adolescence (19-21 years), adulthood (>21), older adulthood (varies)" - based on NICHD Integrated pediatric terminology]', max_length=32, verbose_name='Age at outcome measurement')),
                ('summary', models.TextField(blank=True, help_text='Summarize main findings of outcome, or describe why no details are presented (for example, "no association (data not shown)")')),
            ],
            bases=('assessment.baseendpoint',),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('metric_description', models.TextField(blank=True, help_text='Add additional text describing the metric used, if needed.')),
                ('data_location', models.CharField(blank=True, help_text='Details on where the data are found in the literature (ex: Figure 1, Table 2, etc.)', max_length=128)),
                ('population_description', models.CharField(blank=True, help_text='Detailed description of the population being studied forthis outcome, which may be a subset of the entirestudy-population. For example, "US (national) NHANES2003-2008, Hispanic children 6-18 years, ♂♀ (n=797)"', max_length=128)),
                ('dose_response', models.PositiveSmallIntegerField(choices=[(0, 'not-applicable'), (1, 'monotonic'), (2, 'non-monotonic'), (3, 'no trend'), (4, 'not reported')], default=0, help_text='Was a trend observed?', verbose_name='Dose Response Trend')),
                ('dose_response_details', models.TextField(blank=True)),
                ('prevalence_incidence', models.CharField(blank=True, max_length=128, verbose_name='Overall incidence prevalence')),
                ('statistical_power', models.PositiveSmallIntegerField(choices=[(0, 'not reported or calculated'), (1, 'appears to be adequately powered (sample size met)'), (2, 'somewhat underpowered (sample size is 75% to <100% of recommended)'), (3, 'underpowered (sample size is 50 to <75% required)'), (4, 'severely underpowered (sample size is <50% required)')], default=0, help_text='Is the study sufficiently powered?')),
                ('statistical_power_details', models.TextField(blank=True)),
                ('statistical_test_results', models.TextField(blank=True)),
                ('trend_test', models.CharField(blank=True, help_text='Enter result, if available (ex: p=0.015, p≤0.05, n.s., etc.)', max_length=128, verbose_name='Trend test result')),
                ('estimate_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'mean'), (2, 'geometric mean'), (3, 'median'), (5, 'point'), (4, 'other')], default=0, verbose_name='Central estimate type')),
                ('variance_type', models.PositiveSmallIntegerField(choices=[(0, None), (1, 'SD'), (2, 'SE'), (3, 'SEM'), (4, 'GSD'), (5, 'other')], default=0)),
                ('ci_units', models.FloatField(blank=True, default=0.95, help_text='A 95% CI is written as 0.95.', null=True, verbose_name='Confidence Interval (CI)')),
                ('comments', models.TextField(blank=True, help_text='Summarize main findings of outcome, or describe why no details are presented (for example, "no association (data not shown)")')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResultAdjustmentFactor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('included_in_final_model', models.BooleanField(default=True)),
                ('adjustment_factor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resfactors', to='epi.AdjustmentFactor')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resfactors', to='epi.Result')),
            ],
        ),
        migrations.CreateModel(
            name='ResultMetric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric', models.CharField(max_length=128, unique=True)),
                ('abbreviation', models.CharField(max_length=32)),
                ('isLog', models.BooleanField(default=True, help_text='When plotting, use a log base 10 scale', verbose_name='Display as log')),
                ('showForestPlot', models.BooleanField(default=True, help_text='Does forest-plot representation of result make sense?', verbose_name='Show on forest plot')),
                ('reference_value', models.FloatField(blank=True, default=1, help_text='Null hypothesis value for reference, if applicable', null=True)),
                ('order', models.PositiveSmallIntegerField(help_text='Order as they appear in option-list')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='StudyPopulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('design', models.CharField(choices=[('CO', 'Cohort'), ('CX', 'Cohort (Retrospective)'), ('CY', 'Cohort (Prospective)'), ('CC', 'Case-control'), ('NC', 'Nested case-control'), ('CR', 'Case report'), ('SE', 'Case series'), ('RT', 'Randomized controlled trial'), ('NT', 'Non-randomized controlled trial'), ('CS', 'Cross-sectional')], max_length=2)),
                ('age_profile', models.CharField(blank=True, help_text='Age profile of population (ex: adults, children, pregnant women, etc.)', max_length=128)),
                ('source', models.CharField(blank=True, help_text='Population source (ex: general population, environmental exposure, occupational cohort)', max_length=128)),
                ('region', models.CharField(blank=True, max_length=128)),
                ('state', models.CharField(blank=True, max_length=128)),
                ('eligible_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Eligible N')),
                ('invited_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Invited N')),
                ('participant_n', models.PositiveIntegerField(blank=True, null=True, verbose_name='Participant N')),
                ('comments', models.TextField(blank=True, help_text='Note matching criteria, etc.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='epi.Country')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StudyPopulationCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_type', models.CharField(choices=[('I', 'Inclusion'), ('E', 'Exclusion'), ('C', 'Confounding')], max_length=1)),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spcriteria', to='epi.Criteria')),
                ('study_population', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spcriteria', to='epi.StudyPopulation')),
            ],
        ),
        migrations.AddField(
            model_name='studypopulation',
            name='criteria',
            field=models.ManyToManyField(related_name='populations', through='epi.StudyPopulationCriteria', to='epi.Criteria'),
        ),
        migrations.AddField(
            model_name='studypopulation',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_populations', to='study.Study'),
        ),
        migrations.AddField(
            model_name='result',
            name='adjustment_factors',
            field=models.ManyToManyField(blank=True, related_name='outcomes', through='epi.ResultAdjustmentFactor', to='epi.AdjustmentFactor'),
        ),
        migrations.AddField(
            model_name='result',
            name='comparison_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epi.ComparisonSet'),
        ),
        migrations.AddField(
            model_name='result',
            name='metric',
            field=models.ForeignKey(help_text='&nbsp;', on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epi.ResultMetric'),
        ),
        migrations.AddField(
            model_name='result',
            name='outcome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epi.Outcome'),
        ),
        migrations.AddField(
            model_name='outcome',
            name='study_population',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outcomes', to='epi.StudyPopulation'),
        ),
        migrations.AddField(
            model_name='groupresult',
            name='result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='epi.Result'),
        ),
        migrations.AddField(
            model_name='exposure',
            name='study_population',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exposures', to='epi.StudyPopulation'),
        ),
        migrations.AddField(
            model_name='comparisonset',
            name='exposure',
            field=models.ForeignKey(blank=True, help_text='Exposure-group associated with this group', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparison_sets', to='epi.Exposure'),
        ),
        migrations.AddField(
            model_name='comparisonset',
            name='outcome',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparison_sets', to='epi.Outcome'),
        ),
        migrations.AddField(
            model_name='comparisonset',
            name='study_population',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comparison_sets', to='epi.StudyPopulation'),
        ),
        migrations.AlterUniqueTogether(
            name='criteria',
            unique_together={('assessment', 'description')},
        ),
        migrations.AlterUniqueTogether(
            name='adjustmentfactor',
            unique_together={('assessment', 'description')},
        ),
    ]
