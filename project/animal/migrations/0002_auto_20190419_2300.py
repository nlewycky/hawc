# Generated by Django 2.2 on 2019-04-20 04:00

import animal.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('animal', '0001_initial'),
        ('assessment', '0001_initial'),
        ('study', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('baseendpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='assessment.BaseEndpoint')),
                ('system', models.CharField(blank=True, help_text='Relevant biological system', max_length=128)),
                ('organ', models.CharField(blank=True, help_text='Relevant organ or tissue', max_length=128, verbose_name='Organ (and tissue)')),
                ('effect', models.CharField(blank=True, help_text='Effect, using common-vocabulary', max_length=128)),
                ('effect_subtype', models.CharField(blank=True, help_text='Effect subtype, using common-vocabulary', max_length=128)),
                ('litter_effects', models.CharField(choices=[('NA', 'Not applicable'), ('NR', 'Not reported'), ('YS', 'Yes, statistical control'), ('YD', 'Yes, study-design'), ('N', 'No'), ('O', 'Other')], default='NA', help_text='Type of controls used for litter-effects. The "No" response will be infrequently used. More typically the information will be "Not reported" and assumed not considered. Only use "No" if it is explicitly mentioned in the study that litter was not controlled for.', max_length=2)),
                ('litter_effect_notes', models.CharField(blank=True, help_text='Any additional notes describing how litter effects were controlled', max_length=128)),
                ('observation_time', models.FloatField(blank=True, help_text='Numeric value of the time an observation was reported; optional, should be recorded if the same effect was measured multiple times.', null=True)),
                ('observation_time_units', models.PositiveSmallIntegerField(choices=[(0, 'not reported'), (1, 'seconds'), (2, 'minutes'), (3, 'hours'), (4, 'days'), (5, 'weeks'), (6, 'months'), (9, 'years'), (7, 'post-natal day (PND)'), (8, 'gestational day (GD)')], default=0)),
                ('observation_time_text', models.CharField(blank=True, help_text='Text for reported observation time (ex: "60-90 PND")', max_length=64)),
                ('data_location', models.CharField(blank=True, help_text='Details on where the data are found in the literature (ex: "Figure 1", "Table 2", "Text, p. 24", "Figure 1 and Text, p.24")', max_length=128)),
                ('expected_adversity_direction', models.PositiveSmallIntegerField(choices=[(3, 'increase from reference/control group'), (2, 'decrease from reference/control group'), (1, 'any change from reference/control group'), (0, 'unclear'), (4, '---')], default=4, help_text='Response direction which would be considered adverse', verbose_name='Expected response adversity direction')),
                ('response_units', models.CharField(blank=True, help_text='Units the response was measured in (i.e., μg/dL, % control, etc.)', max_length=32, verbose_name='Response units')),
                ('data_type', models.CharField(choices=[('C', 'Continuous'), ('D', 'Dichotomous'), ('P', 'Percent Difference'), ('DC', 'Dichotomous Cancer'), ('NR', 'Not reported')], default='C', max_length=2, verbose_name='Dataset type')),
                ('variance_type', models.PositiveSmallIntegerField(choices=[(0, 'NA'), (1, 'SD'), (2, 'SE'), (3, 'NR')], default=1)),
                ('confidence_interval', models.FloatField(blank=True, help_text='A 95% CI is written as 0.95.', null=True, verbose_name='Confidence interval (CI)')),
                ('NOEL', models.SmallIntegerField(default=-999, help_text='No observed effect level', verbose_name='NOEL')),
                ('LOEL', models.SmallIntegerField(default=-999, help_text='Lowest observed effect level', verbose_name='LOEL')),
                ('FEL', models.SmallIntegerField(default=-999, help_text='Frank effect level', verbose_name='FEL')),
                ('data_reported', models.BooleanField(default=True, help_text='Dose-response data for endpoint are available in the literature source')),
                ('data_extracted', models.BooleanField(default=True, help_text='Dose-response data for endpoint are extracted from literature into HAWC')),
                ('values_estimated', models.BooleanField(default=False, help_text='Response values were estimated using a digital ruler or other methods')),
                ('monotonicity', models.PositiveSmallIntegerField(choices=[(8, '--'), (0, 'N/A, single dose level study'), (1, 'N/A, no effects detected'), (2, 'visual appearance of monotonicity'), (3, 'monotonic and significant trend'), (4, 'visual appearance of non-monotonicity'), (6, 'no pattern/unclear')], default=8)),
                ('statistical_test', models.CharField(blank=True, help_text="Short description of statistical analysis techniques used, e.g., Fisher Exact Test, ANOVA, Chi Square, Peto's test, none conducted", max_length=256)),
                ('trend_value', models.FloatField(blank=True, help_text='Numerical result for trend-test, if available', null=True)),
                ('trend_result', models.PositiveSmallIntegerField(choices=[(0, 'not applicable'), (1, 'not significant'), (2, 'significant'), (3, 'not reported')], default=3)),
                ('diagnostic', models.TextField(blank=True, help_text='List the endpoint/adverse outcome name as used in the study. This will help during QA/QC of the extraction to the original study in cases where the endpoint/adverse outcome name is adjusted for consistency across studies or assessments.', verbose_name='Endpoint Name in Study')),
                ('power_notes', models.TextField(blank=True, help_text='Power of study-design to detect change from control')),
                ('results_notes', models.TextField(blank=True, help_text='\n            Qualitative description of the results. This field can be\n            left blank if there is no need to further describe numerically\n            extracted findings, e.g., organ or body weights. Use this\n            field to describe findings such as the type and severity\n            of histopathology or malformations not otherwise captured\n            in the numerical data extraction. Also use this field to cut\n            and paste findings described only in text in the study. If\n            coding is used to create exposure-response arrays, then add\n            this comment in bold font at the start of the text box entry\n            <strong>"For exposure-response array data display purposes, the following\n            results were coded (control and no effect findings were coded as\n            "0", treatment-related increases were coded as "1", and\n            treatment-related decreases were coded as "-1"."</strong>\n            ')),
                ('endpoint_notes', models.TextField(blank=True, help_text='Cut and paste from methods, use quotation marks around all text directly copy/pasted from paper. Include all methods pertinent to measuring ALL outcomes, including statistical methods. This will make it easier to copy from existing HAWC endpoints to create new endpoints for a study.', verbose_name='Methods')),
                ('additional_fields', models.TextField(default='{}')),
                ('animal_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='animal.AnimalGroup')),
            ],
            bases=('assessment.baseendpoint',),
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short-text used to describe the experiment (i.e. 2-Year Cancer Bioassay, 10-Day Oral, 28-Day Inhalation, etc.) using title style (all words capitalized). If study contains more than one chemical, then also include the chemical name (e.g. 28-Day Oral PFBS).', max_length=80)),
                ('type', models.CharField(choices=[('Ac', 'Acute (<24 hr)'), ('St', 'Short-term (1-30 days)'), ('Sb', 'Subchronic (30-90 days)'), ('Ch', 'Chronic (>90 days)'), ('Ca', 'Cancer'), ('Me', 'Mechanistic'), ('Rp', 'Reproductive'), ('1r', '1-generation reproductive'), ('2r', '2-generation reproductive'), ('Dv', 'Developmental'), ('Ot', 'Other'), ('NR', 'Not-reported')], help_text='Type of study being performed; be as specific as possible', max_length=2)),
                ('chemical', models.CharField(blank=True, help_text='This field may get displayed in visualizations, so consider using a common acronym, e.g., BPA instead of Bisphenol A', max_length=128, verbose_name='Chemical name')),
                ('cas', models.CharField(blank=True, help_text='\n                CAS number for chemical-tested. Use N/A if not applicable. If more than one\n                CAS number is applicable, then use a common one here and indicate others\n                in the comment field below.\n                ', max_length=40, verbose_name='Chemical identifier (CAS)')),
                ('chemical_source', models.CharField(blank=True, max_length=128, verbose_name='Source of chemical')),
                ('purity_available', models.BooleanField(default=True, verbose_name='Chemical purity available?')),
                ('purity_qualifier', models.CharField(blank=True, choices=[('>', '>'), ('≥', '≥'), ('=', '='), ('', '')], default='', max_length=1)),
                ('purity', models.FloatField(blank=True, help_text='Percentage (ex: 95%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Chemical purity (%)')),
                ('vehicle', models.CharField(blank=True, help_text='Describe vehicle (use name as described in methods but also add the common name if the vehicle was described in a non-standard way). Enter "not reported" if the vehicle is not described. For inhalation studies, air can be inferred if not explicitly reported. Examples: "corn oil," "filtered air," "not reported, but assumed clean air."', max_length=64, verbose_name='Chemical vehicle')),
                ('guideline_compliance', models.CharField(blank=True, help_text='\n            Description of any compliance methods used (i.e. use of EPA OECD, NTP,\n            or other guidelines; conducted under GLP guideline conditions, non-GLP but consistent\n            with guideline study, etc.). This field response should match any description used\n            in study evaluation in the reporting quality domain, e.g., GLP study (OECD guidelines\n            414 and 412, 1981 versions). If not reported, then use state "not reported."\n            ', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Add additional comments. In most cases, this field will be blank. Note that dosing-regime information and animal details are captured in the Animal Group extraction module.', verbose_name='Comments')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to='study.Study')),
            ],
        ),
        migrations.CreateModel(
            name='EndpointGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dose_group_id', models.IntegerField()),
                ('n', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('incidence', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('response', models.FloatField(blank=True, null=True)),
                ('variance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('lower_ci', models.FloatField(blank=True, help_text='Numerical value for lower-confidence interval', null=True, verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(blank=True, help_text='Numerical value for upper-confidence interval', null=True, verbose_name='Upper CI')),
                ('significant', models.BooleanField(default=False, verbose_name='Statistically significant from control')),
                ('significance_level', models.FloatField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Statistical significance level')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='animal.Endpoint')),
            ],
            options={
                'ordering': ('endpoint', 'dose_group_id'),
            },
            bases=(animal.models.ConfidenceIntervalsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='dosingregime',
            name='dosed_animals',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dosed_animals', to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='dosegroup',
            name='dose_regime',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doses', to='animal.DosingRegime'),
        ),
        migrations.AddField(
            model_name='dosegroup',
            name='dose_units',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.DoseUnits'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='dosing_regime',
            field=models.ForeignKey(blank=True, help_text='Specify an existing dosing regime or create a new dosing regime below', null=True, on_delete=django.db.models.deletion.CASCADE, to='animal.DosingRegime'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animal_groups', to='animal.Experiment'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='children', to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='siblings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Species'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='strain',
            field=models.ForeignKey(help_text='When adding a new strain, put the stock in parenthesis, e.g., "Sprague-Dawley (Harlan)."', on_delete=django.db.models.deletion.CASCADE, to='assessment.Strain'),
        ),
    ]
