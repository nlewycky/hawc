# Generated by Django 2.1.2 on 2018-11-02 02:54

import animal.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('animal', '0001_initial'),
        ('assessment', '0001_initial'),
        ('study', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('baseendpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='assessment.BaseEndpoint')),
                ('system', models.CharField(blank=True, help_text='Relevant biological system', max_length=128)),
                ('organ', models.CharField(blank=True, help_text='Relevant organ; also include tissue if relevant', max_length=128, verbose_name='Organ (and tissue)')),
                ('effect', models.CharField(blank=True, help_text='Effect, using common-vocabulary', max_length=128)),
                ('effect_subtype', models.CharField(blank=True, help_text='Effect subtype, using common-vocabulary', max_length=128)),
                ('observation_time', models.FloatField(blank=True, help_text='Numeric value of the time an observation was reported; optional, should be recorded if the same effect was measured multiple times.', null=True)),
                ('observation_time_units', models.PositiveSmallIntegerField(choices=[(0, 'not-reported'), (1, 'seconds'), (2, 'minutes'), (3, 'hours'), (4, 'days'), (5, 'weeks'), (6, 'months'), (9, 'years'), (7, 'PND'), (8, 'GD')], default=0)),
                ('observation_time_text', models.CharField(blank=True, help_text='Text for reported observation time (ex: "60-90 PND")', max_length=64)),
                ('data_location', models.CharField(blank=True, help_text='Details on where the data are found in the literature (ex: Figure 1, Table 2, etc.)', max_length=128)),
                ('expected_adversity_direction', models.PositiveSmallIntegerField(choices=[(3, 'increase from reference/control group'), (2, 'decrease from reference/control group'), (1, 'any change from reference/control group'), (0, 'not reported')], default=0, help_text='Response direction which would be considered adverse', verbose_name='Expected response adversity direction')),
                ('response_units', models.CharField(blank=True, help_text='Units the response was measured in (i.e., μg/dL, % control, etc.)', max_length=32, verbose_name='Response units')),
                ('data_type', models.CharField(choices=[('C', 'Continuous'), ('D', 'Dichotomous'), ('P', 'Percent Difference'), ('DC', 'Dichotomous Cancer'), ('NR', 'Not reported')], default='C', max_length=2, verbose_name='Dataset type')),
                ('variance_type', models.PositiveSmallIntegerField(choices=[(0, 'NA'), (1, 'SD'), (2, 'SE'), (3, 'NR')], default=1)),
                ('confidence_interval', models.FloatField(blank=True, help_text='A 95% CI is written as 0.95.', null=True, verbose_name='Confidence interval (CI)')),
                ('NOEL', models.SmallIntegerField(default=-999, help_text='No observed effect level', verbose_name='NOEL')),
                ('LOEL', models.SmallIntegerField(default=-999, help_text='Lowest observed effect level', verbose_name='LOEL')),
                ('FEL', models.SmallIntegerField(default=-999, help_text='Frank effect level', verbose_name='FEL')),
                ('data_reported', models.BooleanField(default=True, help_text='Dose-response data for endpoint are available in the literature source')),
                ('data_extracted', models.BooleanField(default=True, help_text='Dose-response data for endpoint are extracted from literature into HAWC')),
                ('values_estimated', models.BooleanField(default=False, help_text='Response values were estimated using a digital ruler or other methods')),
                ('monotonicity', models.PositiveSmallIntegerField(choices=[(0, 'N/A, single dose level study'), (1, 'N/A, no effects detected'), (2, 'yes, visual appearance of monotonicity but no trend'), (3, 'yes, monotonic and significant trend'), (4, 'yes, visual appearance of non-monotonic but no trend'), (5, 'yes, non-monotonic and significant trend'), (6, 'no pattern'), (7, 'unclear'), (8, 'not-reported')], default=8)),
                ('statistical_test', models.CharField(blank=True, help_text='Description of statistical analysis techniques used', max_length=256)),
                ('trend_value', models.FloatField(blank=True, help_text='Numerical result for trend-test, if available', null=True)),
                ('trend_result', models.PositiveSmallIntegerField(choices=[(0, 'not applicable'), (1, 'not significant'), (2, 'significant'), (3, 'not reported')], default=3)),
                ('diagnostic', models.TextField(blank=True, help_text='Diagnostic or method used to measure endpoint (if relevant)')),
                ('power_notes', models.TextField(blank=True, help_text='Power of study-design to detect change from control')),
                ('results_notes', models.TextField(blank=True, help_text='Qualitative description of the results')),
                ('endpoint_notes', models.TextField(blank=True, help_text='Any additional notes related to this endpoint/methodology, not including results', verbose_name='General notes/methodology')),
                ('additional_fields', models.TextField(default='{}')),
                ('animal_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='animal.AnimalGroup')),
            ],
            bases=('assessment.baseendpoint',),
        ),
        migrations.CreateModel(
            name='EndpointGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dose_group_id', models.IntegerField()),
                ('n', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('incidence', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('response', models.FloatField(blank=True, null=True)),
                ('variance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('lower_ci', models.FloatField(blank=True, help_text='Numerical value for lower-confidence interval', null=True, verbose_name='Lower CI')),
                ('upper_ci', models.FloatField(blank=True, help_text='Numerical value for upper-confidence interval', null=True, verbose_name='Upper CI')),
                ('significant', models.BooleanField(default=False, verbose_name='Statistically significant from control')),
                ('significance_level', models.FloatField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Statistical significance level')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='animal.Endpoint')),
            ],
            options={
                'ordering': ('endpoint', 'dose_group_id'),
            },
            bases=(animal.models.ConfidenceIntervalsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Short-text used to describe the experiment (i.e. 2-year cancer bioassay, 28-day inhalation, etc.).', max_length=80)),
                ('type', models.CharField(choices=[('Ac', 'Acute (<24 hr)'), ('St', 'Short-term (1-30 days)'), ('Sb', 'Subchronic (30-90 days)'), ('Ch', 'Chronic (>90 days)'), ('Ca', 'Cancer'), ('Me', 'Mechanistic'), ('Rp', 'Reproductive'), ('Dv', 'Developmental'), ('Ot', 'Other'), ('NR', 'Not-reported')], help_text='Type of study being performed; be as specific as-possible', max_length=2)),
                ('chemical', models.CharField(blank=True, max_length=128, verbose_name='Chemical name')),
                ('cas', models.CharField(blank=True, help_text='CAS number for chemical-tested, if available.', max_length=40, verbose_name='Chemical identifier (CAS)')),
                ('chemical_source', models.CharField(blank=True, max_length=128, verbose_name='Source of chemical')),
                ('purity_available', models.BooleanField(default=True, verbose_name='Chemical purity available?')),
                ('purity_qualifier', models.CharField(blank=True, choices=[('>', '>'), ('≥', '≥'), ('=', '='), ('', '')], default='', max_length=1)),
                ('purity', models.FloatField(blank=True, help_text='Percentage (ex: 95%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Chemical purity (%)')),
                ('vehicle', models.CharField(blank=True, help_text='If a vehicle was used, vehicle common-name', max_length=64, verbose_name='Chemical vehicle')),
                ('diet', models.TextField(blank=True, help_text='Description of animal-feed, if relevant')),
                ('guideline_compliance', models.CharField(blank=True, help_text='Description of any compliance methods used (i.e. use of EPA\n            OECD, NTP, or other guidelines; conducted under GLP guideline\n            conditions, non-GLP but consistent with guideline study, etc.)', max_length=128)),
                ('litter_effects', models.CharField(choices=[('NA', 'Not-applicable'), ('NR', 'Not-reported'), ('YS', 'Yes, statistical controls'), ('YD', 'Yes, study-design'), ('N', 'No'), ('O', 'Other')], default='NA', help_text='Type of controls used for litter-effects', max_length=2)),
                ('litter_effect_notes', models.CharField(blank=True, help_text='Any additional notes describing how litter effects were controlled', max_length=128)),
                ('description', models.TextField(blank=True, help_text='Text-description of the experimental protocol used. May also include information such as animal husbandry. Note that dosing-regime information and animal details are captured in other fields.', verbose_name='Description and animal husbandry')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to='study.Study')),
            ],
        ),
        migrations.AddField(
            model_name='dosingregime',
            name='dosed_animals',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dosed_animals', to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='dosegroup',
            name='dose_regime',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doses', to='animal.DosingRegime'),
        ),
        migrations.AddField(
            model_name='dosegroup',
            name='dose_units',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.DoseUnits'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='dosing_regime',
            field=models.ForeignKey(blank=True, help_text='Specify an existing dosing regime or create a new dosing regime below', null=True, on_delete=django.db.models.deletion.CASCADE, to='animal.DosingRegime'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animal_groups', to='animal.Experiment'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='children', to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='siblings',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='animal.AnimalGroup'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Species'),
        ),
        migrations.AddField(
            model_name='animalgroup',
            name='strain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.Strain'),
        ),
    ]
